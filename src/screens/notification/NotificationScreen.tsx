// // import React from 'react';
// // import {View} from 'react-native';
// // import Container from '../../components/Container';
// // import TextComponent from '../../components/TextComponent';
// // import {globalStyles} from '../../styles/globalStyles';

// // const NotificationScreen = () => {
// //   return (
// //     <View style={{flex: 1}}>
// //       <Container isScroll>
// //         <TextComponent
// //           styles={[
// //             globalStyles.inputContainer,
// //             {
// //               backgroundColor: 'white',
// //               marginHorizontal: 20,
// //               // marginVertical: 20,
// //             },
// //           ]}
// //           color="black"
// //           text="Hi·ªán t·∫°i ƒëang kh√¥ng c√≥ th√¥ng b√°o n√†o üò¥ü•∂"
// //           size={20}
// //         />
// //       </Container>
// //     </View>
// //   );
// // };

// // export default NotificationScreen;

import React, {useEffect} from 'react';
import {Alert, View} from 'react-native';
import database from '@react-native-firebase/database';
import messaging from '@react-native-firebase/messaging';

import Container from '../../components/Container';
import TextComponent from '../../components/TextComponent';
import {globalStyles} from '../../styles/globalStyles';

const NotificationScreen = () => {
  useEffect(() => {
    // Y√™u c·∫ßu quy·ªÅn nh·∫≠n th√¥ng b√°o t·ª´ Firebase Messaging
    requestUserPermission();

    // L·∫Øng nghe d·ªØ li·ªáu t·ª´ Firebase Database
    const temperatureRef = database().ref('/Temperatures');
    const onValueChange = temperatureRef.on('value', snapshot => {
      const data = snapshot.val();
      if (data) {
        checkTemperature(data); // Ki·ªÉm tra nhi·ªát ƒë·ªô
      }
    });

    return () => {
      temperatureRef.off('value', onValueChange); // Ng·∫Øt l·∫Øng nghe khi component unmount
    };
  }, []);

  // Y√™u c·∫ßu quy·ªÅn nh·∫≠n th√¥ng b√°o
  const requestUserPermission = async () => {
    const authStatus = await messaging().requestPermission();
    const enabled =
      authStatus === messaging.AuthorizationStatus.AUTHORIZED ||
      authStatus === messaging.AuthorizationStatus.PROVISIONAL;

    if (enabled) {
      console.log('Authorization status:', authStatus);
    }
  };

  // Ki·ªÉm tra nhi·ªát ƒë·ªô v√† g·ª≠i th√¥ng b√°o n·∫øu v∆∞·ª£t ng∆∞·ª°ng
  const checkTemperature = (data: any) => {
    Object.keys(data).forEach(key => {
      const computerData = data[key];
      if (computerData.temperature >= 80 || computerData.temperature <= 1) {
        sendNotification(computerData, key); // G·ª≠i th√¥ng b√°o n·∫øu nhi·ªát ƒë·ªô v∆∞·ª£t ng∆∞·ª°ng
      }
    });
  };

  // G·ª≠i th√¥ng b√°o ƒë·∫øn thi·∫øt b·ªã ng∆∞·ªùi d√πng
  const sendNotification = (computerData: any, computerId: string) => {
    messaging()
      .getToken()
      .then(token => {
        console.log('FCM Token:', token);

        // Hi·ªÉn th·ªã th√¥ng b√°o c·ª•c b·ªô
        Alert.alert(
          `C·∫£nh b√°o nhi·ªát ƒë·ªô m√°y ${computerId}`,
          `M√°y t√≠nh ${computerId} c√≥ nhi·ªát ƒë·ªô ${computerData.temperature}¬∞C. Ki·ªÉm tra ngay!`,
        );

        // G·ª≠i th√¥ng b√°o qua FCM
        fetch('https://fcm.googleapis.com/fcm/send', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: 'key=YOUR_SERVER_KEY', // Thay YOUR_SERVER_KEY b·∫±ng Firebase server key c·ªßa b·∫°n
          },
          body: JSON.stringify({
            to: token,
            notification: {
              title: `C·∫£nh b√°o nhi·ªát ƒë·ªô t·ª´ ${computerId}`,
              body: `M√°y t√≠nh ${computerId} c√≥ nhi·ªát ƒë·ªô ${computerData.temperature}¬∞C, vui l√≤ng ki·ªÉm tra ngay!`,
              priority: 'high',
            },
            data: {
              temperature: computerData.temperature,
              computerId: computerId,
            },
          }),
        });
      })
      .catch(error => {
        console.error('Error sending notification:', error);
      });
  };

  return (
    <View style={{flex: 1}}>
      <Container isScroll>
        <TextComponent
          styles={[
            globalStyles.inputContainer,
            {
              backgroundColor: 'white',
              marginHorizontal: 20,
            },
          ]}
          color="black"
          text="Hi·ªán t·∫°i ƒëang kh√¥ng c√≥ th√¥ng b√°o n√†o üò¥ü•∂"
          size={20}
        />
      </Container>
    </View>
  ); // Kh√¥ng c·∫ßn giao di·ªán cho m√†n h√¨nh n√†y, ch·ªâ c·∫ßn l·∫Øng nghe d·ªØ li·ªáu v√† g·ª≠i th√¥ng b√°o
};

export default NotificationScreen;
